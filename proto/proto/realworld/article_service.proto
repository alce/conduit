syntax = "proto3";

package realworld;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "realworld/common.proto";

option go_package = "conduit/pb/realworld";
option java_package = "com.realworld";
option java_outer_classname = "ArticleServiceProto";
option java_multiple_files = true;

service ArticleService {
  rpc List (ListArticlesRequest) returns (ArticleList) {
    option (google.api.http) = {
      get: "/articles"
    };
  }

  rpc GetFeed (GetFeedRequest) returns (ArticleList) {
    option (google.api.http) = {
      get: "/articles/feed"
    };
  }

  rpc Get (GetArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      get: "/articles/{slug}"
    };
  }

  rpc Create (CreateArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      post: "/articles"
      body: "*"
    };
  }

  rpc Update (UpdateArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      put: "/articles/{slug}"
      body: "*"
    };
  }

  rpc Delete (DeleteArticleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/articles/{slug}"
    };
  }

  rpc CreateComment (CreateCommentRequest) returns (CommentResponse) {
    option (google.api.http) = {
      post: "/articles/{slug}/comments"
    };
  }

  rpc ListComments (ListCommentsRequest) returns (CommentList) {
    option (google.api.http) = {
      get: "/articles/{slug}/comments"
    };
  }

  rpc DeleteComment (DeleteCommentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/articles/{slug}/comments/{id}"
    };
  }

  rpc FavoriteArticle (FavoriteArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      post: "/articles/{slug}/favorite"
    };
  }

  rpc UnfavoriteArticle (FavoriteArticleRequest) returns (ArticleResponse) {
    option (google.api.http) = {
      delete: "/articles/{slug}/favorite"
    };
  }

  rpc ListTags (ListTagsRequest) returns (TagList) {
    option (google.api.http) = {
      get: "/tags"
    };
  }
}

message Article {
  string slug = 1;
  string title = 2;
  string description = 3;
  string body = 4;
  repeated string tag_list = 5;
  bool favorited = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  int32 favorites_count = 9;
  Profile author = 10;
}

message Comment {
  string id = 1;
  string body = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  Profile author = 5;
}

message ListArticlesRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
  optional string tag = 3;
  optional string author = 4;
  optional string favorited = 5;
}

message GetFeedRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message ArticleList {
  repeated Article articles = 1;
  int32 articles_count = 2;
}

message ArticleResponse {
  Article article = 1;
}

message CommentResponse {
  Comment comment = 1;
}

message CreateArticleRequest {
  string title = 1 [(google.api.field_behavior) = REQUIRED];
  string description = 2 [(google.api.field_behavior) = REQUIRED];
  string body = 3 [(google.api.field_behavior) = REQUIRED];
  repeated string tag_list = 4;
}

message DeleteArticleRequest {
  string slug = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetArticleRequest {
  string slug = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateArticleRequest {
  string slug = 1 [(google.api.field_behavior) = REQUIRED];
  optional string title = 2;
  optional string description = 3;
  optional string body = 4;
}

message FavoriteArticleRequest {
  string slug = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListCommentsRequest {
  string slug = 1 [(google.api.field_behavior) = REQUIRED];
}

message CommentList {
  repeated Comment comments = 1;
}

message CreateCommentRequest {
   string slug = 1 [(google.api.field_behavior) = REQUIRED];
   string body = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteCommentRequest {
  string slug = 1 [(google.api.field_behavior) = REQUIRED];
  string id = 2 [(google.api.field_behavior) = REQUIRED];
}

message ListTagsRequest {}

message TagList {
  repeated string tags = 1;
}
